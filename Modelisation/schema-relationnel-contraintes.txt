

1. Contacts(*contact_id, email, society, first_name, last_name, gender, birthdate, tel, address, postal_code)
Contraintes : 
-(1) birthdate < NOW(), NOT NULL
-(2) email NOT NULLL, TRIGGER pour éfier le format avec une expression reguliere
-(3) first_name, last_name, gender, tel, address, postal_code  NOT NULL
------------------------------------------------------------------

2. Trainings(*#contact_id, *training_name, training_center, postal_code, training_start, training_end, diploma)
Contraintes : 
-(1) training_name, training_center, training_start NOT NULL
-(2) training_end > training_start
------------------------------------------------------------------

3. Skills(*skill_id, skill_name, skill_type)
Contraintes : 
- (1) skill_name, skill_type NOT NULL
- (2) skill_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT
- (3) skill_type ∈ {job, instrument, language, style}
- (4) skill_name ∈ { writter, musician, actor, director, producer...
		    saxophone, violin, piano...
		    french, english, arabic, hindi...
		    jazz, classic, R&B... }
- (5) CHECK : verifier que skill_name et skill_type sont coherents (ex : english avec language et non avec job)

------------------------------------------------------------------

4. KnownSkills(*#contact_id, *#skill_id)
Contraintes : 
- (1) TRIGGER : seul un musicien peut avoir un skill_type = instrument ou style

5. RequiredSkills(*#request_id, *#skill_id)

------------------------------------------------------------------

6.  Involvments(*#contact_id, *#creation_id, #skill_id, description)
Contraintes : 
-(1) skill_type doit églae Job 
-(2) skill_name d'un artiste doit appraître dans la table KnownSkills
-(3) description NULLABLE 
------------------------------------------------------------------

7. Creations(*creation_id, creation_name, creation_type, release_date, profits, last_update_profits) 
Contraintes : 
-(1) creation_name, creation_type NOT NULL
-(2) release_date NULLABLE 
-(3) TRIGGER : BEFORE  insert/update, update 0-n ligne dans la table PaymentRecords 
en fonction de la Participation de tous les artistes y ayant joué
- (4) CreationType : album, song, play, movie, TV show, concert
------------------------------------------------------------------

8. AgentRecords(*#agent_id, *#contact_id, *start_date, end_date)
Contraintes : 
-(1) end_date > start_date
-(2) si end_date est NULL, contract est en cours
------------------------------------------------------------------

9. Agents(*agent_id, email, first_name, last_name, gender, birthdate, tel, address, postal_code)
Contraintes : 
-(1) birthdate < NOW()
-(2) email NOT NULLL, contient @ (TRIGGER Véfier avec expression reg)
-(3) first_name, last_name, gender, tel, address  NOT NULL
------------------------------------------------------------------

10. AgencyContracts(*#contact_id, *start_date, end_date, fee)
DateEnd : NULL pour un contrat à durée indeterminée qui est toujours en cours
Contraintes : 
-(1) end_date > start_date
-(2) fee(%) DOUBLE > 0 et <= 100
------------------------------------------------------------------

11. Requests(*request_id, #contact_id(producer), #creation_id, description, budget, status, request_start, request_end)
Contraintes : 
-(1) status = open, close, cancel
-(2) budget NOT NULL >=0 (benevole)
-(3) request_end > request_start (la duree de la demande)
-(4) request_start < Creations[release_date] et request_end < Creations[release_date]
-(5) request_end NULLABLE
-(6) request_start NOT NULL
-(7) KnownSkills : une demande doit être lier au moins une skill dont le type est Job
------------------------------------------------------------------

12. Proposals(*proposal_id, #request_id, #contact_id(artist), status, proposed_date)
Contraintes:
-(1) status NOT NULL : rejected, accpeted, pending
-(2) status : Trigger BEFORE insert/update UNIQUE request_id + status = accpeted parce y'a que 1 pers peut etre accpeté par rapport à une demande
-(3) TRIGGER : Once proposition linked to a demand is accpeted by an artist, the others propositions linked to that demand become status=rejected
-(4) request_start < proposed_date < request_end : TRIGGER BEFORE insert/update Date Between, request_end NULLABLE
-(5) TRIGGER : verifier que l'artiste propose a un contrat en cours ET qu'il n'a pas deja ete propose
------------------------------------------------------------------

13.  ProducerContracts(*#proposal_id, *start_date, end_date, salary, installments_number, is_amendment, incentive(%))
Contraintes : 
-(1) end_date > start_date 
-(2) TRIGGER : start_date > Proposals[proposed_date]
-(3) salary DOUBLE >= 0 
-(4) installments_number > 0, case où installments_number peut être 0 lors Requests[budget] = 0
-(5) is_amendment boolean
-(6) incentive DOUBLE NOT NULL >= 0
-(7) Quand on crée un AVENANT, on annule les paiements du contrat précédent n'ayant pas encore eu lieu
-(8) Chaque nouveau contrat genere des entrées de comptabilité (Pour tous les contrats)

------------------------------------------------------------------

14. PaymentRecords(*#proposal_id, *#start_date(contract), *payment_number, amount, status, date_planned, date_paid, is_incentive)
Contraintes:
-(1) amount NULLABLE > 0, CHECK NULL quand is_incentive = True
-(2) status NOT NULL : DONE, TODO, CANCELLED
-(3) date_planned, date_paid : TRIGGER CHECK >= ProducerContracts[start_date] && date >= NOW()
-(5) agency_fee >=0, artist_salary >=0
-(6) date_planned NOT NULL
-(7) date_paid NULLABLE

------------------------------------------------------------------

15. Reviews(*#creation_id, *author, *date, #contact_id, media, content, grade)
Contraintes : 
-(1) 1 Review correspond exactement 1 Creation
-(2) Date > Creations[release_date]
-(3) content NOT NULL
-(4) garde DOUBLE NULLABLE >= 0 et <=10
-(5) contact_id is NULLABLE
------------------------------------------------------------------

16 Awards(*award_name, *category, *year, #creation_id, #contact_id)
Contraintes : 
-(1) 1 Award correspond exactement a 1 creation
-(2) year >= Creations[release_date.year]
-(3) contact_id is NULLABLE
------------------------------------------------------------------

17. Festivals(*festival_id, festival_name, date, festival_type, city, country)
------------------------------------------------------------------

18. FestivalRecords(*#festival_id, *#contact_id)
